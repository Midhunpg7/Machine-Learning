labour_data <- read.csv("labour_income.csv")
str(labour_data)
summary(labour_data)

#data preprocessing
set.seed(007)
train_rows <- sample(x=seq(1,nrow(labour_data),1), size = 0.7)*nrow(labour_data)
train_data <- labour_data[train_rows ,]
test_data <- labour_data[-train_rows ,]

#standardise the data
install.packages("caret")
library(caret)
std_obj <- preProcess(x = train_data[, !colnames(train_data) %in% c("wages")],
                      method = c("center","scale"))

train_std_data <- predict(std_obj,train_data)
test_std_data <- predict(std_obj,test_data)

#Dummify the data
install.packages("fastDummies")
library(fastDummies)
dummy_obj <- dummyVars( ~ . , train_std_data)

train_dummy_data <- as.data.frame(predict(dummy_obj, train_std_data))

test_dummy_data <- as.data.frame(predict(dummy_obj, test_std_data))

#compatible format

x_train <- as.matrix(train_dummy_data[,-1])
y_train <- as.matrix(train_dummy_data[,1])
x_test <- as.matrix(train_dummy_data[,-1])
y_test <- as.matrix(train_dummy_data[,1])

#Hyper Parameter Tuning

install.packages("glmnet")
library(glmnet)

cv_lasso <- cv.glmnet(x_train,y_train, alpha=1,type.measure = "mse",nfolds = 4)
plot(cv.lasso)
plot(cv_lasso$glmnet.fit, xvar="lambda", label=TRUE)

print(cv_lasso$lambda)
coef(cv_lasso)

cv_ridge <- cv.glmnet(x_train,y_train,alpha =0, type.measure ="mse", nfolds=4)


plot(cv_ridge)
plot(cv_ridge$glmnet.fit, xvar="lambda", label=TRUE)

print(cv_ridge$lambda)
coef(cv_ridge)

#Final lasso regression Model
lasso_model <- glmnet(x_train, y_train,lambda =cv_lasso$lambda.min, alpha =1)
coef(lasso_model)

#Final ridge regression Model
ridge_model <- glmnet(x_train, y_train,lambda =cv_ridge$lambda.min, alpha =0)
coef(ridge_model)

#Model Performance Evaluation
install.packages("DMwR")
library(DMwR)

#Lasso Reegression
regr.eval(trues = y_test,preds = preds_lasso)

#Ridge Regression
regr.eval(trues = y_test,preds = preds_ridge)
